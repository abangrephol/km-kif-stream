<script src="js/jquery.min.js"></script>
<script src="js/moment.min.js"></script>
<script src="js/moment-timezone-with-data.min.js"></script>
<script src="js/jquery.countdown.min.js"></script>
<script src="js/video.min.js"></script>
<script src="js/videojs-resolution-switcher.min.js"></script>
<% if (isLive) { %>
    <script src="js/socket.io.js"></script>
    <script src="js/chat.js"></script>
<% } %>
<script>
    (function () {
        const dateLaunch = moment.tz("2020-08-28 13:00", "Asia/Jakarta");
        $('#counter').countdown(dateLaunch.toDate(), function (event) {
            $(this).find('#days').html(event.strftime('%D'));
            $(this).find('#hours').html(event.strftime('%H'));
            $(this).find('#mins').html(event.strftime('%M'));
            $(this).find('#secs').html(event.strftime('%S'));
        }).on('update.countdown', function(e) {
            checkLive()
        })

        function checkLive() {
            if (dateLaunch.isBefore(moment.tz("Asia/Jakarta"))) {
                $('#counter .countdown').addClass('hidden')
                $('#counter .countdownLive').removeClass('hidden')
            }
        }
        checkLive()

        <% if (isLive || isStatic) { %>
            this.videoJSplayer = videojs('#player', {
                fluid: true,
                autoplay: true,
                aspectRatio: '16:9',
                loop: true,
                html5: {
                    hls: {
                        overrideNative: true,
                        //withCredentials: true
                    },
                    controls: false,
                    autoplay: true,
                    preload: 'auto'
                },
                plugins: {
                    videoJsResolutionSwitcher: {
                        default: 720,
                        dynamicLabel: true
                    }
                }
            });
            this.videoJSplayer.controls('true');
            this.videoJSplayer.isButtonVisible = false;

            this.videoJSplayer.ready(function() {
                var promise = videoJSplayer.play();

                if (promise !== undefined) {
                    promise.then(function() {
                        console.log('autoplay go')
                    }).catch(function(error) {
                        console.log('autoplay no', error)
                    });
                }
            });

            <% if(isStatic == true) { %>
            this.videoJSplayer.updateSrc([
                {
                    src: '<%= streamHost %>/videos/static-video.mp4',
                    type: 'video/mp4',
                    label: '720',
                    res: 720
                }
            ]);
            <% } else { %>
            this.videoJSplayer.updateSrc([
                {
                    src: '<%= streamHost %>' + ':8443/live/stream_720/index.m3u8',
                    type: 'application/x-mpegURL',
                    label: '720',
                    res: 720
                },
                {
                    src: '<%= streamHost %>' + ':8443/live/stream_480/index.m3u8',
                    type: 'application/x-mpegURL',
                    label: '480',
                    res: 480
                },
                {
                    src: '<%= streamHost %>' + ':8443/live/stream_360/index.m3u8',
                    type: 'application/x-mpegURL',
                    label: '360',
                    res: 360
                },
            ]);
            <% } %>
            this.videoJSplayer.on('resolutionchange', function(){
                console.info('Source changed to %s', videoJSplayer.src())
            })
        <% } %>
    })();
</script>